package com.spring.basic.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

//자동으로 스프링 컨테이너에 해당 클래스의 빈을 등록하는 아노테이션
//빈을 등록해 놔야(객체가 생성되어 있어야) HandlerMapping이 이 클래스의 객체를 검색할 수 있음

@Controller//("wanted_beanId") //디폴트는 클래스이름
@RequestMapping("/request") //컨트롤러 자체에 공통된 URI 맵핑
public class RequestController {

//	빈 등록이 어느 시점에 생성되는지 확인하기 위한 출력문
	public RequestController() {
		System.out.println("RequestCon 생성됨!");
	}
	
	@RequestMapping("/test")
	public String testCall() {
		System.out.println("/request/test 요청이 들어옴!");
		return "test";
	}
	
	/* 만약 사용자가 /request/req 요청을 보내왔을 때, view 폴더 아래의
	 * request 폴더 안에 존재하는 req-ex01.jsp파일을 열도록 메서드 구성*/
	@RequestMapping("/req")
	public String req() {
		System.out.println("/request/req 요청이 들어옴!");
		return "request/req-ex01";
	}
	
	@RequestMapping(value="/basic01", method= RequestMethod.GET)
//	@GetMapping("/request/basic01") // spring 4버전부터 사용 가능
	public String basicGet() {
		System.out.println("/basic01 요청이 들어옴!: GET 방식");
		return "/request/req-ex01";
	}
	
	@RequestMapping(value="/basic01", method= RequestMethod.POST)
//	@PostMapping("/request/basic01")
	public String basicPost() {
		System.out.println("/basic01 요청이 들어옴!: POST 방식");
		return "/request/req-ex01";
	}

	//////////////////////////////////////////////
	@GetMapping("/join")
	public void register() {
		System.out.println("/request/join: GET");
	}
	//만약 컨트롤러 내에 리턴타입이 void ? url을 보고 리턴할 곳을 지정한다?
	//url을 파일 경로로 삼겠다는 의미. ( 앞에 슬래시 빼고 request/join 을 파일경로로 잡을 것임)

	
	
	
	
	
}












