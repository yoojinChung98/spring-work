package com.spring.basic.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

//자동으로 스프링 컨테이너에 해당 클래스의 빈을 등록하는 아노테이션
//빈을 등록해 놔야(객체가 생성되어 있어야) HandlerMapping이 이 클래스의 객체를 검색할 수 있음

@Controller//("wanted_beanId") //디폴트는 클래스이름
@RequestMapping("/request") //컨트롤러 자체에 공통된 URI 맵핑
public class RequestController {

//	빈 등록이 어느 시점에 생성되는지 확인하기 위한 출력문
	public RequestController() {
		System.out.println("RequestCon 생성됨!");
	}
	
	@RequestMapping("/test")
	public String testCall() {
		System.out.println("/request/test 요청이 들어옴!");
		return "test";
	}
	
	/* 만약 사용자가 /request/req 요청을 보내왔을 때, view 폴더 아래의
	 * request 폴더 안에 존재하는 req-ex01.jsp파일을 열도록 메서드 구성*/
	@RequestMapping("/req")
	public String req() {
		System.out.println("/request/req 요청이 들어옴!");
		return "request/req-ex01";
	}
	
	
	
	
	//요청 URI 주소가 같더라도, 전송 방식에 따라 맵핑을 다르게 하기 때문에
	//같은 주소를 사용하는 것이 가능합니다. (GET -> 화면처리, POST -> 입력값 처리)
	
	@RequestMapping(value="/basic01", method= RequestMethod.GET)
//	@GetMapping("/request/basic01") // spring 4버전부터 사용 가능
	public String basicGet() {
		System.out.println("/basic01 요청이 들어옴!: GET 방식");
		return "/request/req-ex01";
	}
	
	@RequestMapping(value="/basic01", method= RequestMethod.POST)
//	@PostMapping("/request/basic01")
	public String basicPost() {
		System.out.println("/basic01 요청이 들어옴!: POST 방식");
		return "/request/req-ex01";
	}

	//////////////////////////////////////////////

	//컨트롤러 내의 메서드 타입을 void 로 선언하면
	//요청이 들어온 URL 값을 뷰 리졸버에게 전달합니다.
	@GetMapping("/join")
	public void register() {
		System.out.println("/request/join: GET");
	}
	//만약 컨트롤러 내에 리턴타입이 void ? url을 보고 리턴할 곳을 지정한다?
	//url을 파일 경로로 삼겠다는 의미. ( 앞에 슬래시 빼고 request/join 을 파일경로로 잡을 것임)
	//그럼 결국 접두어/ request/join  접미어 파일이 완성된 url이 될 것.
	
	
	/*
	# 스프링에서 요청과 함께 전달된 데이터를 처리하는 방식
	
	1. 전통적인 jsp/servlet 방식의 파라미터 읽기 처리 방법
	-HttpServletRequest 객체를 활용 (우리가 jsp에서 사용하던 방식) -> 스프링에선 잘 사용하지 않음

	@PostMapping("/join")
	public void register(HttpServletRequest request) {
		System.out.println("/request/join:POST");
		
		System.out.println("ID: "+request.getParameter("userId"));
		System.out.println("PW: "+request.getParameter("userPw"));
		System.out.println("HOBBY: "+Arrays.toString(request.getParameterValues("hobby")));
	}
	*/
	
	//이 방식이 개 꿀인 점은 파라미터를 받을 때 타입을 지정할 수 있다는 점 리스트로도 받을 수 있다규!
	@PostMapping("/join")
	public void register(
			@RequestParam("userId") String userId,
			@RequestParam("userPw") String userPw,
			@RequestParam("hobby") List<String> hobbies
	){
		System.out.println("ID: "+ userId);
		System.out.println("PW: "+ userPw);
		System.out.println("hobby: "+ hobbies);
	}

	
	
	
	
	
}












